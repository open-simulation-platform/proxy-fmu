set(publicHeaderDir ${CMAKE_SOURCE_DIR}/include)
set(generatedSourcesDir "${CMAKE_BINARY_DIR}/generated")

# ==============================================================================
# common headers
# ==============================================================================

set(commonPublicHeaders

        "proxyfmu/fixed_range_random_generator.hpp"
        "proxyfmu/fs_portability.hpp"
        "proxyfmu/lib_info.hpp"
        "proxyfmu/remote_info.hpp"
        "proxyfmu/temp_dir.hpp"

        )

set(commonPublicHeadersFull)
foreach (header IN LISTS commonPublicHeaders)
    list(APPEND commonPublicHeadersFull "${publicHeaderDir}/${header}")
endforeach ()


# Generate sources from .in files
set(generatedFiles "${generatedSourcesDir}/proxyfmu/lib_info.cpp")
configure_file(
        "${CMAKE_CURRENT_SOURCE_DIR}/proxyfmu/lib_info.cpp.in"
        "${generatedFiles}"
        @ONLY
)

# ==============================================================================
# thrift
# ==============================================================================

set(thriftCppSourcesDir "${generatedSourcesDir}/proxyfmu/thrift")
set(thriftJavaSourcesDir "${generatedSourcesDir}/java")

file(MAKE_DIRECTORY "${generatedSourcesDir}")
file(MAKE_DIRECTORY "${thriftCppSourcesDir}")
file(MAKE_DIRECTORY "${thriftJavaSourcesDir}")

if (NOT THRIFT_EXECUTABLE)
    message(FATAL_ERROR "The thrift compiler was not found. Cannot generate Thrift sources.")
endif ()

set(thriftServiceDefinitions
        "${CMAKE_CURRENT_SOURCE_DIR}/proxyfmu/thrift/defs.thrift"
        "${CMAKE_CURRENT_SOURCE_DIR}/proxyfmu/thrift/boot.thrift"
        "${CMAKE_CURRENT_SOURCE_DIR}/proxyfmu/thrift/service.thrift")

# Generate PROXY-FMU classes from Thrift service definitions
foreach (def ${thriftServiceDefinitions})
    execute_process(
            COMMAND "${THRIFT_EXECUTABLE}"
            "--gen" "cpp:no_skeleton"
            "-out" "${thriftCppSourcesDir}"
            "${def}"
    )
    execute_process(
            COMMAND "${THRIFT_EXECUTABLE}"
            "--gen" "java:private-members,fullcamel"
            "-out" "${thriftJavaSourcesDir}"
            "${def}"
    )
endforeach ()

set(thriftGenerated
        "${thriftCppSourcesDir}/defs_types.h"
        "${thriftCppSourcesDir}/defs_types.cpp"
        "${thriftCppSourcesDir}/FmuService.h"
        "${thriftCppSourcesDir}/FmuService.cpp"
        "${thriftCppSourcesDir}/BootService.h"
        "${thriftCppSourcesDir}/BootService.cpp"
        )

add_library(proxyfmu-service OBJECT ${thriftGenerated})
set_target_properties(proxyfmu-service PROPERTIES POSITION_INDEPENDENT_CODE ON)
list(APPEND generatedFiles "$<TARGET_OBJECTS:proxyfmu-service>")


# ==============================================================================
# proxyfmu client lib
# ==============================================================================

set(clientPublicHeaders
        "proxyfmu/client/proxy_fmu.hpp")

set(clientPrivateHeaders
        "proxyfmu/process_helper.hpp"
        "proxyfmu/client/proxy_slave.hpp")

set(clientSources
        "proxyfmu/client/proxy_slave.cpp"
        "proxyfmu/client/proxy_fmu.cpp")

set(clientPublicHeadersFull)
foreach (header IN LISTS clientPublicHeaders)
    list(APPEND clientPublicHeadersFull "${publicHeaderDir}/${header}")
endforeach ()

add_library(proxyfmu-client ${commonPublicHeadersFull} ${clientPublicHeadersFull} ${clientPrivateHeaders} ${clientSources} ${generatedFiles})
add_library(proxyfmu::proxy-client ALIAS proxyfmu-client)
target_compile_features(proxyfmu-client PUBLIC "cxx_std_17")
set_target_properties(proxyfmu-client PROPERTIES POSITION_INDEPENDENT_CODE ON)
target_include_directories(proxyfmu-client
        PUBLIC
        "$<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/include>"
        PRIVATE
        "${CMAKE_CURRENT_SOURCE_DIR}"
        "${generatedSourcesDir}"
        )
target_link_libraries(proxyfmu-client
        PUBLIC
        fmilibcpp::fmilibcpp
        PRIVATE
        thrift::thrift
        Boost::filesystem
        )
if (UNIX)
    target_link_libraries(proxyfmu-client PRIVATE pthread)
endif ()

# Make sure executable is up to date
add_dependencies(proxyfmu-client proxyfmu)


# ==============================================================================
# proxyfmu server lib
# ==============================================================================

set(serverPublicHeaders
        "proxyfmu/server/fmu_service_handler.hpp")

set(serverSources
        "proxyfmu/server/fmu_service_handler.cpp")

set(serverPublicHeadersFull)
foreach (header IN LISTS serverPublicHeaders)
    list(APPEND serverPublicHeadersFull "${publicHeaderDir}/${header}")
endforeach ()

add_library(proxyfmu-lib ${serverPublicHeadersFull} ${serverSources} ${generatedFiles})
add_library(proxyfmu::proxy-lib ALIAS proxyfmu-lib)
target_compile_features(proxyfmu-lib PUBLIC "cxx_std_17")
target_include_directories(proxyfmu-lib
        PUBLIC
        "$<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/include>"
        "${generatedSourcesDir}"
        PRIVATE
        "${CMAKE_CURRENT_SOURCE_DIR}"
        )
target_link_libraries(proxyfmu-lib
        PUBLIC
        fmilibcpp::fmilibcpp
        thrift::thrift
        )
if (UNIX)
    target_link_libraries(proxyfmu-lib PRIVATE pthread)
endif ()


# ==============================================================================
# proxyfmu booter lib
# ==============================================================================

set(serverBooterPublicHeaders
        "proxyfmu/server/boot_service_handler.hpp")

set(serverBooterPrivateHeaders
        "proxyfmu/process_helper.hpp")

set(serverBooterSources
        "proxyfmu/server/boot_service_handler.cpp")

set(serverBooterPublicHeadersFull)
foreach (header IN LISTS serverBooterPublicHeaders)
    list(APPEND serverBooterPublicHeadersFull "${publicHeaderDir}/${header}")
endforeach ()

add_library(proxyfmu-booter-lib ${commonPublicHeadersFull} ${serverBooterPublicHeadersFull} ${serverBooterPrivateHeaders} ${serverBooterSources} ${generatedFiles})
add_library(proxyfmu::proxyfmu-booter-lib ALIAS proxyfmu-booter-lib)
target_compile_features(proxyfmu-booter-lib PUBLIC "cxx_std_17")
target_include_directories(proxyfmu-booter-lib
        PUBLIC
        "$<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/include>"
        "${generatedSourcesDir}"
        PRIVATE
        "${CMAKE_CURRENT_SOURCE_DIR}"
        )
target_link_libraries(proxyfmu-booter-lib
        PUBLIC
        thrift::thrift
        PRIVATE
        Boost::filesystem
        )
if (UNIX)
    target_link_libraries(proxyfmu-booter-lib
            PRIVATE
            pthread
            stdc++fs
            )
endif ()


# ==============================================================================
# Installation rules
# ==============================================================================

install(
        TARGETS proxyfmu-client
        EXPORT "${PROXYFMU_EXPORT_TARGET}"
        ${PROXYFMU_INSTALL_DESTINATIONS}
)
install(
        DIRECTORY "${publicHeaderDir}/proxyfmu"
        DESTINATION "${PROXYFMU_HEADER_INSTALL_DIR}"
)

install(
        DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/proxyfmu/thrift"
        DESTINATION "."
)

install(
        DIRECTORY "${CMAKE_BINARY_DIR}/generated/java"
        DESTINATION "thrift"
)
