name: Build

env:
  CONAN_LOGIN_USERNAME_OSP: ${{ secrets.osp_artifactory_usr }}
  CONAN_PASSWORD_OSP: ${{ secrets.osp_artifactory_pwd }}
  CONAN_REVISIONS_ENABLED: 1
  CONAN_NON_INTERACTIVE: True

on: [push, workflow_dispatch]

jobs:
  conan-on-linux:
    name: Conan
    runs-on: ${{matrix.os}}
    env:
      CC: gcc-${{ matrix.compiler_version }}
      CXX: g++-${{ matrix.compiler_version }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04]
#        build_type: [Debug, Release]
        build_type: [Release]
        compiler_version: [7]
        compiler_libcxx: [libstdc++11]

    steps:
      - uses: actions/checkout@v2
      - name: Install prerequisites
        run: |
          sudo pip3 install --upgrade setuptools pip
          sudo pip3 install conan
      - name: Configure Conan
        run: conan remote add osp https://osp.jfrog.io/artifactory/api/conan/conan-local --force
      - name: Conan create
        run: |
          REFNAME="${GITHUB_REF#refs/*/}"
          VERSION="0.1.0"
          if [[ $GITHUB_REF == refs/tags/* ]] && [[ $REFNAME == $VERSION ]]; then CHANNEL="stable"
          elif [[ $REFNAME == master ]]; then CHANNEL="testing"
          else
            SHORT_REFNAME="${REFNAME:0:40}"
            CHANNEL="testing-${SHORT_REFNAME//\//_}"
          fi
          conan create -s build_type=${{ matrix.build_type }} -s compiler.version=${{ matrix.compiler_version }} -s compiler.libcxx=${{ matrix.compiler_libcxx }} -b missing . osp/${CHANNEL}
      - name: Conan upload
        run: conan upload --all --confirm --remote osp 'proxy-fmu*'

  conan-on-windows:
    name: Conan
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2016]
        build_type: [Debug, Release]
        compiler_version: [15]
    steps:
      - uses: actions/checkout@v2
      - name: Install prerequisites
        run: |
          pip3 install --upgrade setuptools pip
          pip3 install conan
      - name: Configure Conan
        run: conan remote add osp https://osp.jfrog.io/artifactory/api/conan/conan-local --force
      - name: Conan create
        shell: bash
        run: |
          REFNAME="${GITHUB_REF#refs/*/}"
          VERSION="0.1.0"
          if [[ $GITHUB_REF == refs/tags/* ]] && [[ $REFNAME == $VERSION ]]; then CHANNEL="stable"
          elif [[ $REFNAME == master ]]; then CHANNEL="testing"
          else
            SHORT_REFNAME="${REFNAME:0:40}"
            CHANNEL="testing-${SHORT_REFNAME//\//_}"
          fi
          conan create -s build_type=${{ matrix.build_type }} -s compiler.version=${{ matrix.compiler_version }} -b missing . osp/${CHANNEL}
      - name: Conan upload
        run: conan upload --all --confirm --remote osp 'proxy-fmu*'

  cmake-on-linux:
    name: cmake
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04]
#        build_type: [Debug, Release]
#        compiler_version: [7]
    steps:
      - uses: actions/checkout@v2
      - name: Install prerequisites
        run: |
          sudo pip3 install --upgrade setuptools pip
          sudo pip3 install conan
      - name: Configure Conan
        run: conan remote add osp https://osp.jfrog.io/artifactory/api/conan/conan-local --force
      - name: Run conan
        run: conan install . -s build_type=Release -s compiler.libcxx=libstdc++11 --install-folder=build
        shell: bash
      - name: Configure and build
        run: |
          cmake -H. -Bbuild -DPROXYFMU_BUILD_EXAMPLES=ON
          cmake --build build
        shell: bash

  cmake-on-windows:
    name: cmake
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2016]
#        build_type: [Debug, Release]
#        compiler_version: [15]
    steps:
      - uses: actions/checkout@v2
      - name: Install prerequisites
        run: |
          pip3 install --upgrade setuptools pip
          pip3 install conan
      - name: Configure Conan
        run: conan remote add osp https://osp.jfrog.io/artifactory/api/conan/conan-local --force
      - name: Run conan
        run: conan install . -s build_type=Release --install-folder=build
        shell: bash
      - name: Configure and build
        run: |
          cmake . -G "Visual Studio 15 2017 Win64" -Bbuild -DPROXYFMU_BUILD_EXAMPLES=ON
          cmake --build build --config Release
        shell: bash


#      - name: Test (Linux)
#        if: startsWith(runner.os, 'Linux')
#        run: |
#          cd build/tests && ctest
#        shell: bash
#
#      - name: Test (Windows)
#        if: startsWith(runner.os, 'Windows')
#        run: |
#          cd build/tests && ctest -C Release
#        shell: bash