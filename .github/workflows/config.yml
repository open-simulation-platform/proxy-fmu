name: Build

env:
  CONAN_LOGIN_USERNAME_OSP: ${{ secrets.osp_artifactory_usr }}
  CONAN_PASSWORD_OSP: ${{ secrets.osp_artifactory_pwd }}
  CONAN_REVISIONS_ENABLED: 1
  CONAN_NON_INTERACTIVE: True

on: [push, workflow_dispatch]

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, windows-2016]

    steps:
      - uses: actions/checkout@v2

      - name: Install prerequisites (Linux)
        if: startsWith(runner.os, 'Linux')
        run: |
          sudo pip3 install --upgrade setuptools pip
          sudo pip3 install conan

      - name: Install prerequisites (Windows)
        if: startsWith(runner.os, 'Windows')
        run: |
          pip3 install --upgrade setuptools pip
          pip3 install conan

      - name: Configure Conan
        run: conan remote add osp https://osp.jfrog.io/artifactory/api/conan/conan-local --force

      - name: Run conan (Linux)
        if: startsWith(runner.os, 'Linux')
        run: |
          conan install . -s build_type=Release -s compiler.libcxx=libstdc++11 --install-folder=build
        shell: bash

      - name: Run conan (Windows)
        if: startsWith(runner.os, 'Windows')
        run: |
          conan install . -s build_type=Release --install-folder=build
        shell: bash

      - name: Configure and build (Linux)
        if: startsWith(runner.os, 'Linux')
        run: |
          cmake -H. -Bbuild -DPROXY_FMU_BUILD_EXAMPLES=ON
          cmake --build build
        shell: bash

      - name: Configure and build (Windows)
        if: startsWith(runner.os, 'Windows')
        run: |
          cmake . -G "Visual Studio 15 2017 Win64" -Bbuild -DPROXY_FMU_BUILD_EXAMPLES=ON
          cmake --build build --config Release
        shell: bash

      - name: Conan create (Linux)
        if: startsWith(runner.os, 'Linux')
        shell: bash
        run: |
          REFNAME="${GITHUB_REF#refs/*/}"
          VERSION="v$(<version.txt)"
          if [[ $GITHUB_REF == refs/tags/* ]] && [[ $REFNAME == $VERSION ]]; then CHANNEL="stable"
          elif [[ $REFNAME == master ]]; then CHANNEL="testing"
          else
            SHORT_REFNAME="${REFNAME:0:40}"
            CHANNEL="testing-${SHORT_REFNAME//\//_}"
          fi
          conan create -s build_type=${{ matrix.build_type }} -s compiler.version=9 -s compiler.libcxx=libstdc++11 -b missing . osp/${CHANNEL}

      - name: Conan upload (Linux)
        if: startsWith(runner.os, 'Linux')
        run: |
        conan upload --all -c -r osp 'proxy-fmu*'

      - name: Conan create (Windows)
        if: startsWith(runner.os, 'Windows')
        shell: bash
        run: |
          REFNAME="${GITHUB_REF#refs/*/}"
          VERSION="0.1.0"
          if [[ $GITHUB_REF == refs/tags/* ]] && [[ $REFNAME == $VERSION ]]; then CHANNEL="stable"
          elif [[ $REFNAME == master ]]; then CHANNEL="testing"
          else
            SHORT_REFNAME="${REFNAME:0:40}"
            CHANNEL="testing-${SHORT_REFNAME//\//_}"
          fi
          conan create -s build_type=Release -s compiler.version=15 -b missing . osp/${CHANNEL}

      - name: Conan upload (Windows)
        if: startsWith(runner.os, 'Windows')
        run: conan upload --all --confirm --remote osp 'proxy-fmu*'


#      - name: Test (Linux)
#        if: startsWith(runner.os, 'Linux')
#        run: |
#          cd build/tests && ctest
#        shell: bash
#
#      - name: Test (Windows)
#        if: startsWith(runner.os, 'Windows')
#        run: |
#          cd build/tests && ctest -C Release
#        shell: bash